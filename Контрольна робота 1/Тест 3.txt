// Клас, що представляє людину
class Human(val name: String, val age: Int) {
  override def toString: String = s"Name: $name, Age: $age"
}

// Клас, що представляє список людей
class ListHuman {
  var humans: List[Human] = List()

  // Метод для додавання нової людини до списку
  def addHuman(human: Human): Unit = {
    humans = humans :+ human
  }

  // Метод для видалення людини зі списку за іменем
  def deleteByName(name: String): Unit = {
    humans = humans.filterNot(_.name == name)
  }

  // Метод для пошуку людини за іменем
  def findByName(name: String): Option[Human] = {
    humans.find(_.name == name)
  }

  // Метод для фільтрації списку за певною умовою
  def filterByCondition(condition: Human => Boolean): List[Human] = {
    humans.filter(condition)
  }

  // Метод для виведення списку людей
  def printList(): Unit = {
    humans.foreach(println)
  }
}

// Приклад використання
object Main extends App {
  val listHuman = new ListHuman

  // Додавання нових людей
  listHuman.addHuman(new Human("Алекс", 25))
  listHuman.addHuman(new Human("Павло", 30))
  listHuman.addHuman(new Human("Аліса", 22))

  // Виведення списку до видалення
  println("Before deletion:")
  listHuman.printList()

  // Видалення людини за іменем
  listHuman.deleteByName("Алекс")

  // Виведення списку після видалення
  println("\nAfter deletion:")
  listHuman.printList()

  // Пошук людини за іменем
  val foundPerson = listHuman.findByName("Павло")
  println(s"\nFound person: $foundPerson")

  // Фільтрація за умовою (наприклад, за віком менше 30)
  val filteredList = listHuman.filterByCondition(_.age < 30)
  println("\nFiltered list:, За віком менше 30")
  filteredList.foreach(println)
}
